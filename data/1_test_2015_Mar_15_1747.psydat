ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/Users/plb/r2d4/data/1_test_2015_Mar_15_1747
p8
sS'runtimeInfo'
p9
NsS'name'
p10
Vtest
p11
sS'dataNames'
p12
(lp13
S'response.keys'
p14
aS'response.corr'
p15
aS'response.rt'
p16
asS'autoLog'
p17
I01
sS'extraInfo'
p18
(dp19
S'date'
p20
V2015_Mar_15_1747
p21
sS'frameRate'
p22
cnumpy.core.multiarray
scalar
p23
(cnumpy
dtype
p24
(S'f8'
I0
I1
tRp25
(I3
S'<'
NNNI-1
I-1
I0
tbS'v\xfd\xae\xb2\x0b\xd0M@'
tRp26
sS'expName'
p27
g11
sVsession
p28
V001
p29
sVparticipant
p30
V1
ssS'loopsUnfinished'
p31
(lp32
g1
(cpsychopy.data
TrialHandler
p33
g3
NtRp34
(dp35
S'origin'
p36
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, gui, hardware\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = u'test'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=[800, 400], fullscr=False, screen=0, allowGUI=True, allowStencil=False,\u000a    monitor=u'testMonitor', color=[0,0,0], colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000acontext = visual.Rect(win, width=1, height=1, autoDraw = True, lineColor='black', lineWidth = 6)\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000a\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "Instructions"\u000aInstructionsClock = core.Clock()\u000ainstructions = visual.TextStim(win=win, ori=0, name='instructions',\u000a    text=u'When the number appears on the screen tap your tap the corresponding key with that finger. \u005cn1 = thumb\u005cn2 = pointer\u005cn3 = middle\u005cn4 = ring\u005cn5 = pinky',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aISI = core.StaticPeriod(win=win, screenHz=expInfo['frameRate'], name='ISI')\u000aTarget = visual.TextStim(win=win, ori=0, name='Target',\u000a    text='default text',    font=u'Arial',\u000a    pos=[0, 0], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=-1.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine\u000a\u000a#------Prepare to start Routine "Instructions"-------\u000at = 0\u000aInstructionsClock.reset()  # clock\u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000aInstructionsComponents = []\u000aInstructionsComponents.append(instructions)\u000aInstructionsComponents.append(key_resp_2)\u000afor thisComponent in InstructionsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "Instructions"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = InstructionsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a\u000a    # *instructions* updates\u000a    if t >= 0.0 and instructions.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instructions.tStart = t  # underestimates by a little under one frame\u000a        instructions.frameNStart = frameN  # exact frame index\u000a        instructions.setAutoDraw(True)\u000a\u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys()\u000a\u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a\u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in InstructionsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a\u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a\u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "Instructions"-------\u000afor thisComponent in InstructionsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# the Routine "Instructions" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=5, method='random',\u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'stimuli.csv'),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialClock.reset()  # clock\u000a    frameN = -1\u000a    routineTimer.add(2.500000)\u000a    # update component parameters for each repeat\u000a    Target.setText(stimulus)\u000a    response = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    response.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(ISI)\u000a    trialComponents.append(Target)\u000a    trialComponents.append(response)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *Target* updates\u000a        if t >= 1 and Target.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            Target.tStart = t  # underestimates by a little under one frame\u000a            Target.frameNStart = frameN  # exact frame index\u000a            Target.setAutoDraw(True)\u000a        if Target.status == STARTED and t >= (1 + (.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            Target.setAutoDraw(False)\u000a\u000a        # *response* updates\u000a        if t >= 1 and response.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            response.tStart = t  # underestimates by a little under one frame\u000a            response.frameNStart = frameN  # exact frame index\u000a            response.status = STARTED\u000a            # keyboard checking is just starting\u000a            response.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if response.status == STARTED and t >= (1 + (1.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            response.status = STOPPED\u000a        if response.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['1', '2', '3', '4', '5'])\u000a\u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                response.keys.extend(theseKeys)  # storing all keys\u000a                response.rt.append(response.clock.getTime())\u000a                # was this 'correct'?\u000a                if (response.keys == str(cor_ans)) or (response.keys == cor_ans):\u000a                    response.corr = 1\u000a                else:\u000a                    response.corr = 0\u000a        # *ISI* period\u000a        if t >= 0.0 and ISI.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            ISI.tStart = t  # underestimates by a little under one frame\u000a            ISI.frameNStart = frameN  # exact frame index\u000a            ISI.start(0.5)\u000a        elif ISI.status == STARTED: #one frame should pass before updating params and completing\u000a            ISI.complete() #finish the static period\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a\u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a\u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a\u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if response.keys in ['', [], None]:  # No response was made\u000a       response.keys=None\u000a       # was no response the correct answer?!\u000a       if str(cor_ans).lower() == 'none': response.corr = 1  # correct non-response\u000a       else: response.corr = 0  # failed to respond (incorrectly)\u000a    # store data for trials (TrialHandler)\u000a    trials.addData('response.keys',response.keys)\u000a    trials.addData('response.corr', response.corr)\u000a    if response.keys != None:  # we had a response\u000a        trials.addData('response.rt', response.rt)\u000a    thisExp.nextEntry()\u000a\u000a# completed 5 repeats of 'trials'\u000a\u000awin.close()\u000acore.quit()\u000a
p37
sS'thisTrial'
p38
g1
(cpsychopy.data
TrialType
p39
c__builtin__
dict
p40
(dp41
S'stimulus'
p42
g23
(g24
(S'i8'
I0
I1
tRp43
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp44
sS'cor_ans'
p45
g23
(g43
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp46
stRp47
sS'_exp'
p48
I4607226192
sg10
S'trials'
p49
sg6
S'r2d4_pilot.py'
p50
sS'thisRepN'
p51
I1
sg17
I01
sg18
g19
sS'data'
p52
g1
(cpsychopy.data
DataHandler
p53
g40
(dp54
S'ran'
p55
cnumpy.ma.core
_mareconstruct
p56
(cnumpy.ma.core
MaskedArray
p57
cnumpy
ndarray
p58
(I0
tp59
S'b'
tRp60
(I1
(I4
I5
tg24
(S'f4'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg14
g56
(g57
g58
g59
S'b'
tRp62
(I1
(I4
I5
tg24
(S'O8'
I0
I1
tRp63
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80oY\x17\x01\x00\x00\x00`\xf7(\x17\x01\x00\x00\x00\xd8\xf7(\x17\x01\x00\x00\x00(\xf8(\x17\x01\x00\x00\x00P\xf8(\x17\x01\x00\x00\x00p\xdaa\x17\x01\x00\x00\x00@\xdc\x17\x00\x01\x00\x00\x00\xc8\xf8(\x17\x01\x00\x00\x00\xf0\xf8(\x17\x01\x00\x00\x00\x98\xf6(\x17\x01\x00\x00\x00hcY\x17\x01\x00\x00\x00@\xf9(\x17\x01\x00\x00\x00\x10\xf7(\x17\x01\x00\x00\x00h\xf9(\x17\x01\x00\x00\x00\x90\xf9(\x17\x01\x00\x00\x000hY\x17\x01\x00\x00\x00\xb8\xe1Y\x17\x01\x00\x00\x00\xe0\xf9(\x17\x01\x00\x00\x00\x00\xf8(\x17\x01\x00\x00\x00\x08\xfa(\x17\x01\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg15
g56
(g57
g58
g59
S'b'
tRp64
(I1
(I4
I5
tg61
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x01\x01\x01\x01\x00\x00\x01\x01\x01\x00\x01\x01\x01\x01\x00\x00\x01\x01\x01'
Ntbsg16
g56
(g57
g58
g59
S'b'
tRp65
(I1
(I4
I5
tg63
I00
S'hlY\x17\x01\x00\x00\x000\xfa(\x17\x01\x00\x00\x00X\xfa(\x17\x01\x00\x00\x00\x80\xfa(\x17\x01\x00\x00\x00\xa8\xfa(\x17\x01\x00\x00\x00\x00\xdba\x17\x01\x00\x00\x00 \xfb(\x17\x01\x00\x00\x00 \xf6(\x17\x01\x00\x00\x00\xf8\xfa(\x17\x01\x00\x00\x00\xd0\xf5(\x17\x01\x00\x00\x00HbY\x17\x01\x00\x00\x00p\xf6(\x17\x01\x00\x00\x00\xc0\xf6(\x17\x01\x00\x00\x00\xe8\xf6(\x17\x01\x00\x00\x00\xb0\xf7(\x17\x01\x00\x00\x00\xb8\xcaF\x17\x01\x00\x00\x00\xc8\xe6Y\x17\x01\x00\x00\x00p\xfb(\x17\x01\x00\x00\x00\x98\xfb(\x17\x01\x00\x00\x00\xc0\xfb(\x17\x01\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p66
g56
(g57
g58
g59
S'b'
tRp67
(I1
(I4
I5
tg61
I00
S'\x00\x00@@\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x80@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x01\x01\x01\x00\x00\x01\x01\x01\x00\x01\x01\x01\x01\x00\x00\x01\x01\x01'
NtbstRp68
(dp69
S'isNumeric'
p70
(dp71
g55
I01
sg16
I00
sg15
I01
sg14
I00
sg66
I01
ssg49
g34
sS'dataTypes'
p72
(lp73
g55
ag66
ag14
ag15
ag16
asS'dataShape'
p74
(lp75
I4
aI5
asbsS'method'
p76
S'random'
p77
sS'sequenceIndices'
p78
cnumpy.core.multiarray
_reconstruct
p79
(g58
(I0
tS'b'
tRp80
(I1
(I4
I5
tg43
I01
S'\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00'
tbsS'finished'
p81
I00
sS'nReps'
p82
I5
sS'nRemaining'
p83
I13
sS'trialList'
p84
(lp85
g47
ag1
(g39
g40
(dp86
g42
g23
(g43
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp87
sg45
g23
(g43
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp88
stRp89
ag1
(g39
g40
(dp90
g42
g23
(g43
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp91
sg45
g23
(g43
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp92
stRp93
ag1
(g39
g40
(dp94
g42
g23
(g43
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp95
sg45
g23
(g43
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp96
stRp97
asS'seed'
p98
NsS'thisIndex'
p99
g23
(g43
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp100
sS'thisN'
p101
I6
sS'thisTrialN'
p102
I2
sS'nTotal'
p103
I20
sS'_warnUseOfNext'
p104
I01
sbasS'saveWideText'
p105
I01
sS'thisEntry'
p106
(dp107
sS'version'
p108
S''
sS'_paramNamesSoFar'
p109
(lp110
g42
ag45
asS'entries'
p111
(lp112
(dp113
g28
g29
sS'trials.thisIndex'
p114
g23
(g43
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp115
sg14
(lp116
S'2'
aS'3'
asg42
g87
sS'trials.thisRepN'
p117
I0
sg22
g26
sS'trials.thisN'
p118
I0
sg15
I0
sg27
g11
sS'trials.thisTrialN'
p119
I0
sg20
g21
sg30
V1
sg45
g88
sg16
(lp120
F0.40187716484069824
aF0.58519315719604492
asa(dp121
g28
g29
sS'trials.thisIndex'
p122
g23
(g43
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp123
sg14
(lp124
S'3'
aS'4'
asg42
g91
sS'trials.thisRepN'
p125
I0
sg22
g26
sS'trials.thisN'
p126
I1
sg15
I0
sg27
g11
sS'trials.thisTrialN'
p127
I1
sg20
g21
sg30
V1
sg45
g92
sg16
(lp128
F0.35143804550170898
aF0.40239286422729492
asa(dp129
g28
g29
sS'trials.thisIndex'
p130
g23
(g43
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp131
sg14
(lp132
S'2'
aS'4'
aS'5'
asg42
g95
sS'trials.thisRepN'
p133
I0
sg22
g26
sS'trials.thisN'
p134
I2
sg15
I0
sg27
g11
sS'trials.thisTrialN'
p135
I2
sg20
g21
sg30
V1
sg45
g96
sg16
(lp136
F0.33621788024902344
aF0.53646397590637207
aF0.58587789535522461
asa(dp137
g28
g29
sS'trials.thisIndex'
p138
g23
(g43
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp139
sg14
(lp140
S'3'
aS'2'
asg42
g44
sS'trials.thisRepN'
p141
I0
sg22
g26
sS'trials.thisN'
p142
I3
sg15
I0
sg27
g11
sS'trials.thisTrialN'
p143
I3
sg20
g21
sg30
V1
sg45
g46
sg16
(lp144
F0.28552603721618652
aF0.45240902900695801
asa(dp145
g28
g29
sS'trials.thisIndex'
p146
g23
(g43
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp147
sg14
(lp148
S'1'
aS'4'
asg42
g95
sS'trials.thisRepN'
p149
I1
sg22
g26
sS'trials.thisN'
p150
I4
sg15
I0
sg27
g11
sS'trials.thisTrialN'
p151
I0
sg20
g21
sg30
V1
sg45
g96
sg16
(lp152
F0.2351529598236084
aF0.76832413673400879
asa(dp153
g28
g29
sS'trials.thisIndex'
p154
g23
(g43
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp155
sg14
Nsg42
g87
sS'trials.thisRepN'
p156
I1
sg22
g26
sS'trials.thisN'
p157
I5
sg15
I0
sg27
g11
sS'trials.thisTrialN'
p158
I1
sg20
g21
sg30
V1
sg45
g88
sasS'loops'
p159
(lp160
g34
asS'savePickle'
p161
I00
sb.